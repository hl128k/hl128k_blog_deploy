<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>免费图床Telegraph-Image</title>
      <link href="/2024/07/17/202407170906/"/>
      <url>/2024/07/17/202407170906/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>部署了博客少不了要用到图片的时候,没有一个合适的图床肯定是不行的,看了一圈还是决定再嫖一次大善人.</p><h2 id="部署效果"><a href="#部署效果" class="headerlink" title="部署效果"></a>部署效果</h2><p><img src="https://telegraph-image.128765.xyz/file/6400327ab03db4aa0f921.png" alt="预览图片" title="预览图片"></p><h1 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h1><p>略<br>按项目文档一步一步走即可.项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NmLXBhZ2VzL1RlbGVncmFwaC1JbWFnZQ==">Telegraph-Image<i class="fa fa-external-link-alt"></i></span></p><h1 id="部署后的问题"><a href="#部署后的问题" class="headerlink" title="部署后的问题"></a>部署后的问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>原始项目没有对上传加以限制，导致会出现一个问题只有有人知道你部署的就可以使用你的图床，一般人使用到也没有什么问题，万一碰见不法分子就要遭殃了</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>翻阅项目的issues，这个问题已经有很多人提出，同样的也有很多解决方法被研究出来,如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NmLXBhZ2VzL1RlbGVncmFwaC1JbWFnZS9pc3N1ZXMvOTc=">issues#97<i class="fa fa-external-link-alt"></i></span>,其中有两个解决方案很不错<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pY3JvTWF0cml4T3Jn">@MicroMatrixOrg<i class="fa fa-external-link-alt"></i></span>提出的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NmLXBhZ2VzL1RlbGVncmFwaC1JbWFnZS9pc3N1ZXMvOTcjaXNzdWVjb21tZW50LTE5ODUxOTM4OTE=">增加防盗链<i class="fa fa-external-link-alt"></i></span>,和<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21heXRvbTIwMTY=">@maytom2016<i class="fa fa-external-link-alt"></i></span>修改的增加认证版本<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21heXRvbTIwMTYvVGVsZWdyYXBoLUltYWdlLWF1dGg=">Telegraph-Image-auth<i class="fa fa-external-link-alt"></i></span>很符合我的期望,不过<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21heXRvbTIwMTYvVGVsZWdyYXBoLUltYWdlLWF1dGg=">Telegraph-Image-auth<i class="fa fa-external-link-alt"></i></span>复刻版本有些老,我还是想要新版本的,而且还能同步官方最好.最后决定自己动手,好在修改难度不高.<br>于是基于这两个方案来修改我的</p><h3 id="上传增加认证"><a href="#上传增加认证" class="headerlink" title="上传增加认证"></a>上传增加认证</h3><p>对上传文件<code>functions/upload.js</code>进行修改,代码参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21heXRvbTIwMTYvVGVsZWdyYXBoLUltYWdlLWF1dGg=">Telegraph-Image-auth<i class="fa fa-external-link-alt"></i></span>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import &#123; errorHandling, telemetryData &#125; from &quot;./utils/middleware&quot;;</span><br><span class="line"></span><br><span class="line">function UnauthorizedException(reason) &#123;</span><br><span class="line">  return new Response(reason, &#123;</span><br><span class="line">    status: 401,</span><br><span class="line">    statusText: &quot;Unauthorized&quot;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &quot;Content-Type&quot;: &quot;text/plain;charset=UTF-8&quot;,</span><br><span class="line">      // Disables caching by default.</span><br><span class="line">      &quot;Cache-Control&quot;: &quot;no-store&quot;,</span><br><span class="line">      // Returns the &quot;Content-Length&quot; header for HTTP HEAD requests.</span><br><span class="line">      &quot;Content-Length&quot;: reason.length,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export async function onRequestPost(context) &#123;  // Contents of context object  </span><br><span class="line">    const &#123;</span><br><span class="line">        request, // same as existing Worker API  </span><br><span class="line">        env, // same as existing Worker API  </span><br><span class="line">        params, // if filename includes [id] or [[path]]   </span><br><span class="line">        waitUntil, // same as ctx.waitUntil in existing Worker API  </span><br><span class="line">        next, // used for middleware or to fetch assets  </span><br><span class="line">        data, // arbitrary space for passing data between middlewares </span><br><span class="line">    &#125; = context;</span><br><span class="line">    const ref=request.headers.get(&#x27;Referer&#x27;);</span><br><span class="line">    const url1= new URL(ref)</span><br><span class="line">    const refparam = new URLSearchParams(url1.search);</span><br><span class="line">    const autcode=refparam.get(&#x27;authcode&#x27;);</span><br><span class="line">    if(autcode==env.AUTH_CODE)&#123;</span><br><span class="line">        const url2 = new URL(request.url)</span><br><span class="line">        const url = new URL(url2.protocol + &#x27;//&#x27; + url2.host + &#x27;/upload&#x27; + url2.search);</span><br><span class="line">      </span><br><span class="line">        const clonedRequest = request.clone();</span><br><span class="line">        await errorHandling(context);</span><br><span class="line">        telemetryData(context);</span><br><span class="line">        const response = fetch(&#x27;https://telegra.ph/&#x27; + url.pathname + url.search, &#123;</span><br><span class="line">            method: clonedRequest.method,</span><br><span class="line">            headers: clonedRequest.headers,</span><br><span class="line">            body: clonedRequest.body,</span><br><span class="line">        &#125;);</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    return new UnauthorizedException(&quot;error&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加防盗链"><a href="#增加防盗链" class="headerlink" title="增加防盗链"></a>增加防盗链</h3><p>对文件读取<code>functions/file/[id].js</code>增加防盗链限制,参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NmLXBhZ2VzL1RlbGVncmFwaC1JbWFnZS9pc3N1ZXMvOTcjaXNzdWVjb21tZW50LTE5ODUxOTM4OTE=">增加防盗链<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">export async function onRequest(context) &#123;  // Contents of context object  </span><br><span class="line">    const &#123;</span><br><span class="line">        request, // same as existing Worker API  </span><br><span class="line">        env, // same as existing Worker API  </span><br><span class="line">        params, // if filename includes [id] or [[path]]   </span><br><span class="line">        waitUntil, // same as ctx.waitUntil in existing Worker API  </span><br><span class="line">        next, // used for middleware or to fetch assets  </span><br><span class="line">        data, // arbitrary space for passing data between middlewares </span><br><span class="line">    &#125; = context;</span><br><span class="line"></span><br><span class="line">    const url = new URL(request.url);</span><br><span class="line">    let Referer = request.headers.get(&#x27;Referer&#x27;)</span><br><span class="line">    if (Referer) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            let refererUrl = new URL(Referer)</span><br><span class="line">            let allowedDomains = env.ALLOWED_DOMAINS.split(&#x27;,&#x27;); </span><br><span class="line">            let isAllowed = allowedDomains.some(domain =&gt; &#123;</span><br><span class="line">              let domainPattern = new RegExp(`(^|\\.)$&#123;domain&#125;$`);</span><br><span class="line">              return domainPattern.test(refererUrl.hostname);</span><br><span class="line">            &#125;);</span><br><span class="line">            if (!isAllowed) &#123;</span><br><span class="line">              return Response.redirect(url.origin + &quot;/block-img.html&quot;, 302);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return Response.redirect(url.origin + &quot;/block-img.html&quot;, 302);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    const response = fetch(&#x27;https://telegra.ph/&#x27; + url.pathname + url.search, &#123;</span><br><span class="line">        method: request.method,</span><br><span class="line">        headers: request.headers,</span><br><span class="line">        body: request.body,</span><br><span class="line">    &#125;).then(async (response) =&gt; &#123;</span><br><span class="line">        console.log(response.ok); // true if the response status is 2xx</span><br><span class="line">        console.log(response.status); // 200</span><br><span class="line">        if (response.ok) &#123;</span><br><span class="line">            // Referer header equal to the admin page</span><br><span class="line">            console.log(url.origin + &quot;/admin&quot;)</span><br><span class="line">            if (request.headers.get(&#x27;Referer&#x27;) == url.origin + &quot;/admin&quot;) &#123;</span><br><span class="line">                //show the image</span><br><span class="line">                return response;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (typeof env.img_url == &quot;undefined&quot; || env.img_url == null || env.img_url == &quot;&quot;) &#123; &#125; else &#123;</span><br><span class="line">                //check the record from kv</span><br><span class="line">                const record = await env.img_url.getWithMetadata(params.id);</span><br><span class="line">                console.log(&quot;record&quot;)</span><br><span class="line">                console.log(record)</span><br><span class="line">                if (record.metadata === null) &#123;</span><br><span class="line"></span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                    //if the record is not null, redirect to the image</span><br><span class="line">                    if (record.metadata.ListType == &quot;White&quot;) &#123;</span><br><span class="line">                        return response;</span><br><span class="line">                    &#125; else if (record.metadata.ListType == &quot;Block&quot;) &#123;</span><br><span class="line">                        console.log(&quot;Referer&quot;)</span><br><span class="line">                        console.log(request.headers.get(&#x27;Referer&#x27;))</span><br><span class="line">                        if (typeof request.headers.get(&#x27;Referer&#x27;) == &quot;undefined&quot; || request.headers.get(&#x27;Referer&#x27;) == null || request.headers.get(&#x27;Referer&#x27;) == &quot;&quot;) &#123;</span><br><span class="line">                            return Response.redirect(url.origin + &quot;/block-img.html&quot;, 302)</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            return Response.redirect(&quot;https://static-res.pages.dev/teleimage/img-block-compressed.png&quot;, 302)</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; else if (record.metadata.Label == &quot;adult&quot;) &#123;</span><br><span class="line">                        if (typeof request.headers.get(&#x27;Referer&#x27;) == &quot;undefined&quot; || request.headers.get(&#x27;Referer&#x27;) == null || request.headers.get(&#x27;Referer&#x27;) == &quot;&quot;) &#123;</span><br><span class="line">                            return Response.redirect(url.origin + &quot;/block-img.html&quot;, 302)</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            return Response.redirect(&quot;https://static-res.pages.dev/teleimage/img-block-compressed.png&quot;, 302)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //check if the env variables WhiteList_Mode are set</span><br><span class="line">                    console.log(&quot;env.WhiteList_Mode:&quot;, env.WhiteList_Mode)</span><br><span class="line">                    if (env.WhiteList_Mode == &quot;true&quot;) &#123;</span><br><span class="line">                        //if the env variables WhiteList_Mode are set, redirect to the image</span><br><span class="line">                        return Response.redirect(url.origin + &quot;/whitelist-on.html&quot;, 302);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //if the env variables WhiteList_Mode are not set, redirect to the image</span><br><span class="line">                        return response;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //get time</span><br><span class="line">            let time = new Date().getTime();</span><br><span class="line"></span><br><span class="line">            let apikey = env.ModerateContentApiKey</span><br><span class="line"></span><br><span class="line">            if (typeof apikey == &quot;undefined&quot; || apikey == null || apikey == &quot;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">                if (typeof env.img_url == &quot;undefined&quot; || env.img_url == null || env.img_url == &quot;&quot;) &#123;</span><br><span class="line">                    console.log(&quot;Not enbaled KV&quot;)</span><br><span class="line"></span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //add image to kv</span><br><span class="line">                    await env.img_url.put(params.id, &quot;&quot;, &#123;</span><br><span class="line">                        metadata: &#123; ListType: &quot;None&quot;, Label: &quot;None&quot;, TimeStamp: time &#125;,</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                await fetch(`https://api.moderatecontent.com/moderate/?key=` + apikey + `&amp;url=https://telegra.ph/` + url.pathname + url.search).</span><br><span class="line">                    then(async (response) =&gt; &#123;</span><br><span class="line">                        let moderate_data = await response.json();</span><br><span class="line">                        console.log(moderate_data)</span><br><span class="line">                        console.log(&quot;---env.img_url---&quot;)</span><br><span class="line">                        console.log(env.img_url == &quot;true&quot;)</span><br><span class="line">                        if (typeof env.img_url == &quot;undefined&quot; || env.img_url == null || env.img_url == &quot;&quot;) &#123; &#125; else &#123;</span><br><span class="line">                            //add image to kv</span><br><span class="line">                            await env.img_url.put(params.id, &quot;&quot;, &#123;</span><br><span class="line">                                metadata: &#123; ListType: &quot;None&quot;, Label: moderate_data.rating_label, TimeStamp: time &#125;,</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (moderate_data.rating_label == &quot;adult&quot;) &#123;</span><br><span class="line">                            return Response.redirect(url.origin + &quot;/block-img.html&quot;, 302)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return response;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>修改之后相比于原项目增加了两个环境变量<br><code>AUTH_CODE</code>:上传时认证密码<br><code>ALLOWED_DOMAINS</code>访问时允许的域名,我对空进行的放行<br>由于还打算同步上游项目所以只对必要部分修改,文档什么的没有修改</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hsMTI4ay9UZWxlZ3JhcGgtSW1hZ2U=">https://github.com/hl128k/Telegraph-Image<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> Telegraph-Image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Actions完成Hexo源码与编译后分离部署</title>
      <link href="/2024/07/14/202407142310/"/>
      <url>/2024/07/14/202407142310/</url>
      
        <content type="html"><![CDATA[<p>部署过程就不多说了，网上很多现成的教程。就直接放actions代码了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">name: Deploy Blog to DeployRes</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout repository</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line">      with:</span><br><span class="line">          submodules: true</span><br><span class="line">          fetch-depth: 0</span><br><span class="line">    - name: Setup Node.js</span><br><span class="line">      uses: actions/setup-node@v4</span><br><span class="line">      with:</span><br><span class="line">        node-version: &#x27;18&#x27;</span><br><span class="line">    - name: Install Dependencies</span><br><span class="line">      run: npm install</span><br><span class="line">    - name: Generate Static Files</span><br><span class="line">    - name: Update &#x27;updated&#x27; field in posts</span><br><span class="line">      run: |</span><br><span class="line">        for file in source/_posts/*.md; do</span><br><span class="line">          last_commit_date=$(git log -1 --format=&quot;%ci&quot; -- $file)</span><br><span class="line">          if grep -q &#x27;^updated: &#x27; $file; then</span><br><span class="line">            sed -i &quot;s/^updated: .*/updated: $last_commit_date/&quot; $file</span><br><span class="line">          else</span><br><span class="line">            sed -i &quot;/^title: .*/a\updated: $last_commit_date&quot; $file</span><br><span class="line">          fi</span><br><span class="line">        done</span><br><span class="line">      run: npx hexo generate</span><br><span class="line">    - name: Deploy to DeployRes</span><br><span class="line">      uses: peaceiris/actions-gh-pages@v4</span><br><span class="line">      with:</span><br><span class="line">        personal_token: $&#123;&#123; secrets.BLOG_DEPLOY_TOKEN &#125;&#125;</span><br><span class="line">        publish_dir: ./public</span><br><span class="line">        publish_branch: master</span><br><span class="line">        destination_dir: blog</span><br><span class="line">        external_repository: ［用户名］/［编译文件存放的项目名］</span><br></pre></td></tr></table></figure><p>主题下载的时候使用了git拉取，导致提交的时候还发生了项目冲突，使用的主题文件夹变成了一个文件。<br>后面删除主题以子项目的方式拉取才正常。<br>如果不是用子项目的话可以删除这部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with:</span><br><span class="line">          submodules: true</span><br><span class="line">          fetch-depth: 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Actions </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serv00 更新 go-proxy-bingai 脚本</title>
      <link href="/2024/07/14/202407171624/"/>
      <url>/2024/07/14/202407171624/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 设置变量</span><br><span class="line">REPO=&quot;Harry-zklcdc/go-proxy-bingai&quot;</span><br><span class="line">DOWNLOAD_DIR=&quot;./go_proxy_bingai_update&quot;</span><br><span class="line">EXECUTABLE=&quot;go-proxy-bingai&quot;</span><br><span class="line">TARGET_DIR=&quot;$(pwd)&quot;</span><br><span class="line"></span><br><span class="line"># 获取最新版本的下载链接</span><br><span class="line">LATEST_RELEASE=$(curl -s &quot;https://api.github.com/repos/$REPO/releases/latest&quot;)</span><br><span class="line">DOWNLOAD_URL=$(echo &quot;$LATEST_RELEASE&quot; | jq -r &#x27;.assets[] | select(.name | contains(&quot;freebsd-amd64.tar.gz&quot;)) | .browser_download_url&#x27;)</span><br><span class="line"></span><br><span class="line"># 检查是否获取到下载链接</span><br><span class="line">if [ -z &quot;$DOWNLOAD_URL&quot; ]; then</span><br><span class="line">  echo &quot;无法获取下载链接，请检查仓库和资产名称。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 创建下载目录</span><br><span class="line">mkdir -p &quot;$DOWNLOAD_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 下载最新版本</span><br><span class="line">curl -L -o &quot;$DOWNLOAD_DIR/$EXECUTABLE.tar.gz&quot; &quot;$DOWNLOAD_URL&quot;</span><br><span class="line"></span><br><span class="line"># 检查下载是否成功</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;下载失败，请检查网络连接或下载链接。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 解压下载的文件</span><br><span class="line">tar -xzvf &quot;$DOWNLOAD_DIR/$EXECUTABLE.tar.gz&quot; -C &quot;$DOWNLOAD_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 检查解压是否成功</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;解压失败，请检查压缩包内容。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 移动可执行文件到脚本目录</span><br><span class="line">mv &quot;$DOWNLOAD_DIR/$EXECUTABLE&quot; &quot;$TARGET_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 检查移动是否成功</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;移动文件失败，请检查目标目录路径和权限。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 清理临时文件</span><br><span class="line">rm -rf &quot;$DOWNLOAD_DIR&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;更新成功！&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
          <category> Serv00 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Serv00 </tag>
            
            <tag> go-proxy-bingai </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serv00 更新 fuclaude 脚本</title>
      <link href="/2024/07/14/202407171626/"/>
      <url>/2024/07/14/202407171626/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 设置变量</span><br><span class="line">REPO=&quot;wozulong/fuclaude&quot;</span><br><span class="line">DOWNLOAD_DIR=&quot;./fuclaude_update&quot;</span><br><span class="line">TARGET_DIR=&quot;./fuclaude&quot;</span><br><span class="line">ZIP_PASSWORD=&quot;linux.do&quot;</span><br><span class="line">PORT=&quot;YOUR_PORT&quot;  # 请替换为你的实际端口</span><br><span class="line">PASSWORD=&quot;YOUR_PASSWORD&quot;  # 请替换为你的实际密码</span><br><span class="line"></span><br><span class="line"># 获取最新版本的下载链接</span><br><span class="line">LATEST_RELEASE=$(curl -s &quot;https://api.github.com/repos/$REPO/releases/latest&quot;)</span><br><span class="line">DOWNLOAD_URL=$(echo &quot;$LATEST_RELEASE&quot; | jq -r &#x27;.assets[] | select(.name | contains(&quot;freebsd-amd64&quot;)) | .browser_download_url&#x27;)</span><br><span class="line"></span><br><span class="line"># 检查是否获取到下载链接</span><br><span class="line">if [ -z &quot;$DOWNLOAD_URL&quot; ]; then</span><br><span class="line">  echo &quot;无法获取下载链接，请检查仓库和资产名称。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 创建下载目录</span><br><span class="line">mkdir -p &quot;$DOWNLOAD_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 下载最新版本</span><br><span class="line">curl -L -o &quot;$DOWNLOAD_DIR/fuclaude.zip&quot; &quot;$DOWNLOAD_URL&quot;</span><br><span class="line"></span><br><span class="line"># 检查下载是否成功</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;下载失败，请检查网络连接或下载链接。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 解压下载的文件</span><br><span class="line">unzip -P &quot;$ZIP_PASSWORD&quot; -o &quot;$DOWNLOAD_DIR/fuclaude.zip&quot; -d &quot;$DOWNLOAD_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 检查解压是否成功</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;解压失败，请检查压缩包密码。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 检查解压后的文件夹名称</span><br><span class="line">EXTRACTED_DIR=$(find &quot;$DOWNLOAD_DIR&quot; -mindepth 1 -maxdepth 1 -type d)</span><br><span class="line"></span><br><span class="line"># 检查解压后的文件夹是否存在</span><br><span class="line">if [ ! -d &quot;$EXTRACTED_DIR&quot; ]; then</span><br><span class="line">  echo &quot;解压后的文件夹不存在，请检查压缩包内容。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 替换目标目录中的文件</span><br><span class="line">cp -r &quot;$EXTRACTED_DIR&quot;/* &quot;$TARGET_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 检查复制是否成功</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;复制文件失败，请检查目标目录路径和权限。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 编辑 config.json 文件</span><br><span class="line">sed -i &#x27;&#x27; &#x27;s/&quot;bind&quot;: &quot;127.0.0.1:8181&quot;/&quot;bind&quot;: &quot;0.0.0.0:&#x27;&quot;$PORT&quot;&#x27;&quot;/; s/&quot;signup_enabled&quot;: *false/&quot;signup_enabled&quot;: true/; s/&quot;show_session_key&quot;: *false/&quot;show_session_key&quot;: true/; s/&quot;site_password&quot;: *&quot;[^&quot;]*&quot;/&quot;site_password&quot;: &quot;&#x27;&quot;$PASSWORD&quot;&#x27;&quot;/&#x27; &quot;$TARGET_DIR/config.json&quot;</span><br><span class="line"></span><br><span class="line"># 检查编辑是否成功</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;编辑 config.json 文件失败，请检查文件路径和权限。&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 清理临时文件</span><br><span class="line">rm -rf &quot;$DOWNLOAD_DIR&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;更新成功！&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
          <category> Serv00 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Serv00 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> fuclaude </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/12/hello-world/"/>
      <url>/2024/07/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hello World!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
